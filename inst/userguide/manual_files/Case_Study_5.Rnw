\SweaveOpts{keep.source=TRUE, prefix.string=./figures/CS5-, eps=FALSE, split=TRUE}
\chapter{Analyzing noisy animal tracking data}
\label{chap:CStracks}
\chaptermark{Analyzing animal tracking data}

<<RUNFIRST, echo=FALSE, include.source=FALSE, keep.source=FALSE>>=
library(MARSS)
options(width = 60)
options(prompt = " ", continue = " ")
op <- par(no.readonly = TRUE)
@
<<Cs00_required_libraries, echo=FALSE>>=
library(MARSS)
library(maps)
@
%Add footnote with instructions for getting code
\blfootnote{Type \texttt{RShowDoc("Chapter\_AnimalTracking.R",package="MARSS")} at the R command line to open a file with all the code for the examples in this chapter.}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{A simple random walk model of animal movement}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\index{MARSS model!multivariate example}\index{animal tracking}A simple random walk model of movement with drift (directional movement) but no correlation is 
\begin{gather}
x_{1,t} = x_{1,t-1} + u_1 + w_{1,t}, \;\; w_{1,t} \sim \N(0,\sigma^2_1)\\
x_{2,t} = x_{2,t-1} + u_2 + w_{2,t}, \;\; w_{2,t} \sim \N(0,\sigma^2_2)
\label{eq:movement}
\end{gather}
where $x_{1,t}$ is the location at time $t$ along one axis (here, longitude) and $x_{2,t}$ is for another, generally orthogonal, axis (here, latitude).   The parameter $u_1$ is the rate of longitudinal movement and $u_2$ is the rate of latitudinal movement. We add errors to our observations of location:
\begin{gather}
y_{1,t} = x_{1,t} + v_{1,t}, \;\; v_{1,t} \sim \N(0,\eta^2_1)\\
y_{2,t} = x_{2,t} + v_{2,t}, \;\; v_{2,t} \sim \N(0,\eta^2_2),
\label{eq:observe}
\end{gather}

This model is  comprised of two separate univariate state-space models.  Note that $y_1$ depends only on $x_1$ and $y_2$ depends only on $x_2$.  There are no actual interactions between these two univariate models.  However, we can write the model down in the form of a multivariate model using diagonal variance-covariance matrices and a diagonal design ($\ZZ$) matrix.  Because the variance-covariance matrices and $\ZZ$ are diagonal, the $x_1$:$y_1$ and $x_2$:$y_2$ processes will be independent as intended.  Here are Equations \ref{eq:movement} and \ref{eq:observe} written as a MARSS model (in matrix form)\index{MARSS model}:
\begin{gather}
\begin{bmatrix}x_{1,t}\\x_{2,t}\end{bmatrix}
= \begin{bmatrix}x_{1,t-1}\\x_{2,t-1}\end{bmatrix}
+ \begin{bmatrix}u_1\\u_2\end{bmatrix}
+ \begin{bmatrix}w_{1,t}\\w_{2,t}\end{bmatrix},
 \textrm{ } \ww_t \sim \MVN\begin{pmatrix}0,\begin{bmatrix}\sigma^2_1&0\\0&\sigma^2_2\end{bmatrix} \end{pmatrix}  \label{eq:mssmlong.a} \\
\nonumber \\
\begin{bmatrix}y_{1,t}\\y_{2,t}\end{bmatrix}
= \begin{bmatrix}1&0\\0&1\end{bmatrix}
\begin{bmatrix}x_{1,t}\\x_{2,t}\end{bmatrix}
+ \begin{bmatrix}v_{1,t}\\ v_{2,t}\end{bmatrix},
 \textrm{ } \vv_t \sim \MVN\begin{pmatrix}0,\begin{bmatrix}\eta^2_1&0\\0&\eta^2_2\end{bmatrix} \end{pmatrix}  \label{eq:mssmlong.b}
\end{gather}
The variance-covariance matrix for $\ww_t$ is a diagonal matrix with unequal variances, $\sigma^2_1$ and $\sigma^2_2$. The variance-covariance matrix for $\vv_t$ is a diagonal matrix with unequal variances,  $\eta^2_1$ and $\eta^2_2$. We can write this succinctly as
\begin{gather}
\xx_t = \xx_{t-1} + \uu + \ww_t, \;\; \ww_t \sim \MVN(0,\QQ) \\
\yy_t = \xx_{t} + \vv_t, \;\; \vv_t \sim \MVN(0,\RR). 
\label{eq:mssm}
\end{gather}

\section{Loggerhead sea turtle tracking data}
Loggerhead sea turtles (\emph{Caretta caretta}) are listed as threatened under the United States Endangered Species Act of 1973.  Over the last ten years, a number of state and local agencies have been deploying ARGOS tags on loggerhead turtles on the east coast of the United States.  We have data on eight individuals over that period.  In this chapter, we use some turtle data from the WhaleNet Archive of
STOP Data, however we have corrupted this data severely by adding random errors in order to create a ``bad tag'' problem (Figure \ref{fig:CS5.fig1}), and it would appear that our sea turtles are becoming land turtles (at least part of the time).   We will use the MARSS model to estimate true positions and speeds from the corrupted data.  

Our noisy data are in \texttt{loggerheadNoisy}.  They consist of daily readings of location (longitude and latitude). If data are missing for a day, then the entries for latitude and longitude for that day should be NA.  However, to make the code in this chapter run quickly, we have interpolated all missing values in the original, uncorrupted, dataset (\texttt{loggerhead}).  The first six lines of the corrupted data are
<<Cs01_data2>>=
loggerheadNoisy[1:6, ]
@
The file has data for eight turtles:
<<Cs02_turtles2>>=
turtles <- levels(loggerheadNoisy$turtle)
turtles
@
We will  analyze the position data for ``Big Mama''.  We put the data for ``Big Mama'' into matrix \texttt{dat}.  \verb@dat@ is transposed because we need time across the columns.
<<Cs03_data3, keep.source=TRUE>>=
turtlename <- "BigMama"
theTurtle <- which(loggerheadNoisy$turtle == turtlename)
dat <- loggerheadNoisy[theTurtle, 5:6]
dat <- t(dat) # transpose
@

Figure \ref{fig:CS5.fig1} shows the corrupted location data for Big Mama. The figure code uses the \texttt{maps} \R package. You will need to install this \R package in order to run the example code.  
<<Cs04_fig-code>>=
# load the map package; you have to install it first
library(maps)
# Read in our noisy data (no missing values)
pdat <- loggerheadNoisy # for plotting
turtlename <- "BigMama"
theTurtle <- which(loggerheadNoisy$turtle == turtlename)
par(mai = c(0, 0, 0, 0), mfrow = c(1, 1))
map("state",
  region = c(
    "florida", "georgia", "south carolina",
    "north carolina", "virginia", "delaware", "new jersey", "maryland"
  ),
  xlim = c(-85, -70)
)
points(pdat$lon[theTurtle], pdat$lat[theTurtle],
  col = "blue", pch = 21, cex = 0.7
)
@

%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
\begin{figure}[htp]
\begin{center}
<<Cs05_badtagfig,fig=TRUE,echo=FALSE>>=
# load the map package; you have to install it first
library(maps)
# Read in our noisy data (no missing values)
pdat <- loggerheadNoisy # for plotting
turtlename <- "BigMama"
par(mai = c(0, 0, 0, 0), mfrow = c(1, 1))
map("state", region = c(
  "florida", "georgia", "south carolina", "north carolina",
  "virginia", "delaware", "new jersey", "maryland"
), xlim = c(-85, -70))
points(pdat$lon[which(pdat$turtle == turtlename)], pdat$lat[which(pdat$turtle == turtlename)],
  col = "blue", pch = 21, cex = 0.7
)
@
\end{center}
\caption{Plot of the tag data from the turtle Big Mama.  Errors in the location data make it seem that Big Mama has been moving overland. }
\label{fig:CS5.fig1}
\end{figure}
%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

\section{Estimate locations from the bad tag data}

We will begin by specifying the structure of the MARSS model and then use \texttt{MARSS()} to fit that model to the data. There are two state processes (one for latitude and the other for longitude), and there is one observation time series for each state process.   As we saw in Equation \ref{eq:mssmlong.b}, $\ZZ$ is the an identity matrix (a diagonal matrix with 1s on the diagonal).  We could specify this structure as \texttt{Z.model="identity"} or \texttt{Z.model=factor(c(1,2))}. Although technically, this is unnecessary as this is the default form for $\ZZ$.

We will assume that the errors are independent and that there are different drift rates ($u$), process variances ($\sigma^2$) and observation variances for latitude and longitude ($\eta^2$).
<<Cs06_setup2>>=
Z.model <- "identity"
U.model <- "unequal"
Q.model <- "diagonal and unequal"
R.model <- "diagonal and unequal"
@
Fit the model to the data:
<<Cs07_fitmodel, results=hide>>=
kem <- MARSS(dat, model = list(
  Z = Z.model,
  Q = Q.model, R = R.model, U = U.model
))
@

We can create a plot comparing the estimated and actual locations (Figure \ref{fig:kaltotrue}). The real locations (from which \texttt{loggerheadNoisy} was produced by adding noise) are in  \texttt{loggerhead} and plotted with crosses.  There are only a few data points for the real data because in the real tag data, there are many missing days.  
<<Cs08_code-to-plot>>=
# Code to plot estimated turtle track against observations
# The estimates
pred.lon <- kem$states[1, ]
pred.lat <- kem$states[2, ]

par(mai = c(0, 0, 0, 0), mfrow = c(1, 1))
library(maps)
pdat <- loggerheadNoisy
turtlename <- "BigMama"
map("state",
  region = c(
    "florida", "georgia", "south carolina",
    "north carolina", "virginia", "delaware", "new jersey", "maryland"
  ),
  xlim = c(-85, -70)
)
points(pdat$lon[theTurtle], pdat$lat[theTurtle],
  col = "blue", pch = 21, cex = 0.7
)
lines(pred.lon, pred.lat, col = "red", lwd = 2)

goodturtles <- loggerhead
gooddat <- goodturtles[which(goodturtles$turtle == turtlename), 5:6]
points(gooddat[, 1], gooddat[, 2], col = "black", lwd = 2, pch = 3, cex = 1.1)
legend("bottomright", c(
  "bad locations", "estimated true location",
  "good location data"
),
pch = c(1, -1, 3), lty = c(-1, 1, -1),
col = c("blue", "red", "black"), bty = FALSE
)
@

%~~~~~~~~~~~~~~~~~~~~~~~~~
\begin{figure}[htp]
\begin{center}
<<Cs09_figbigmama,fig=TRUE,width=6, height=6,echo=FALSE>>=
# Code to plot estimated turtle track against observations
# The estimates
pred.lon <- kem$states[1, ]
pred.lat <- kem$states[2, ]

par(mai = c(0, 0, 0, 0), mfrow = c(1, 1))
library(maps)
pdat <- loggerheadNoisy
turtlename <- "BigMama"
map("state", region = c(
  "florida", "georgia", "south carolina", "north carolina",
  "virginia", "delaware", "new jersey", "maryland"
), xlim = c(-85, -70))
points(pdat$lon[which(pdat$turtle == turtlename)],
  pdat$lat[which(pdat$turtle == turtlename)],
  col = "blue", pch = 21, cex = 0.7
)
lines(pred.lon, pred.lat, col = "red", lwd = 2)

goodturtles <- loggerhead
gooddat <- goodturtles[which(goodturtles$turtle == turtlename), 5:6]
points(gooddat[, 1], gooddat[, 2],
  col = "black", lwd = 2, pch = 3, cex = 1.1
)
legend("bottomright", c(
  "bad locations", "estimated true location",
  "good location data"
),
pch = c(1, -1, 3), lty = c(-1, 1, -1),
col = c("blue", "red", "black"), bty = FALSE
)
@
\end{center}
\caption{Plot of the estimated track of the turtle Big Mama versus the good location data (before we corrupted it with noise).}
\label{fig:kaltotrue}
\end{figure}
%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

\section{Estimate speeds for each turtle}
For each of the eight turtles, estimate the average miles traveled per day.  To calculate the distance traveled by a turtle each day, you use the estimate (from \texttt{MARSS()}) of the latitude/longitude location of turtle at day $t$ and at day $t-1$.  To calculate distance traveled in miles from latitude/longitude start and finish locations, we will use the function \verb@GCDF@:
<<Cs09b_GCDF>>=
GCDF <- function(lon1, lon2, lat1, lat2, degrees = TRUE, units = "miles") {
  temp <- ifelse(degrees == FALSE,
    acos(sin(lat1) * sin(lat2) + cos(lat1) * cos(lat2) * cos(lon2 - lon1)),
    acos(sin(lat1 / 57.2958) * sin(lat2 / 57.2958) +
      cos(lat1 / 57.2958) * cos(lat2 / 57.2958) *
        cos(lon2 / 57.2958 - lon1 / 57.2958))
  )
  r <- 3963.0 # (statute miles) , default
  if ("units" == "nm") r <- 3437.74677 # (nautical miles)
  if ("units" == "km") r <- 6378.7 # (kilometers)
  return(r * temp)
}
@
We can now compute the distance traveled each day by passing in lat/lon estimates from day $i-1$ and day $i$:
<<Cs10_distance, eval=FALSE>>=
distance[i - 1] <- GCDF(
  pred.lon[i - 1], pred.lon[i],
  pred.lat[i - 1], pred.lat[i]
)
@
\texttt{pred.lon} and \texttt{pred.lat} are the predicted longitudes and latitudes from \texttt{MARSS()}: rows one and two in \verb@kem$states@.  To calculate the distances for all days, we put this through a \texttt{for} loop:
<<Cs11_distance2, keep.source=TRUE>>=
distance <- array(NA, dim = c(dim(dat)[2] - 1, 1))
for (i in 2:dim(dat)[2]) {
  distance[i - 1] <- GCDF(
    pred.lon[i - 1], pred.lon[i],
    pred.lat[i - 1], pred.lat[i]
  )
}
@

The command \texttt{mean(distance)} gives us the average distance per day.  We can also make a histogram of the distances traveled per day (Figure \ref{fig:disfig}).
%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
\begin{figure}[htp]
\begin{center}
<<Cs13_disfig,fig=TRUE>>= 
par(mfrow = c(1, 1))
hist(distance) # make a histogram of distance traveled per day
@
\end{center}
\caption{Histogram of the miles traveled per day for Big Mama with estimates that account for measurement error in the data.}
\label{fig:disfig}
\end{figure}
%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We can compare the histogram of daily distances to what we would get if we had not accounted for measurement error (Figure \ref{fig:disfig2}).
%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
\begin{figure}[htp]
\begin{center}
<<Cs14_disfig2,fig=TRUE>>= 
# Compare to the distance traveled per day if you used the raw data
distance.noerr <- array(NA, dim = c(dim(dat)[2] - 1, 1))
for (i in 2:dim(dat)[2]) {
  distance.noerr[i - 1] <- GCDF(dat[1, i - 1], dat[1, i], dat[2, i - 1], dat[2, i])
}
hist(distance.noerr) # make a histogram of distance traveled per day
@
\end{center}
\caption{Histogram of the miles traveled per day for Big Mama with estimates that account for measurement error in the data.}
\label{fig:disfig2}
\end{figure}
%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We can also compare the mean miles per day:
<<Cs15_mean.miles, keep.source=TRUE>>=
# accounting for observation error
mean(distance)
# assuming the data have no observation error
mean(distance.noerr)
@

You can repeat the analysis done for ``Big Mama'' for each of the other turtles and compare the turtle speeds and errors.  You will need to replace ``Big Mama'' in the code with the name of the other turtle:
<<Cs16_turt-names>>=
levels(loggerheadNoisy$turtle)
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\SweaveOpts{eval=FALSE}
\section{Using specialized packages to analyze tag data}
If you have real tag data to analyze, you should use a state-space modeling package that is customized for fitting MARSS models to tracking data. The \{MARSS\} package does not have all the bells and whistles that you would want for analyzing tracking data, particularly tracking data in the marine environment. Examples are the \{Ukfsst\} and \{kftrack\} \R packages:
\begin{description}
\item[UKFSST] https://github.com/positioning/kalmanfilter/wiki/ArticleUkfsst
\item[KFTRACK] https://github.com/positioning/kalmanfilter/wiki/Articlekftrack
\end{description}

\texttt{kftrack}\index{animal tracking!kftrack} is a full-featured toolbox for analyzing tag data with extended Kalman filtering.  It incorporates a number of extensions that are important for analyzing track data: barriers to movement such as coastlines and non-Gaussian movement distributions.  With \texttt{kftrack}, you can use the real tag data which has big gaps, i.e., days with no location.  \texttt{MARSS()} will struggle with these data because it will estimate states for all the unseen days; \texttt{kftrack} only fits to the seen days.  


<<Reset, echo=FALSE>>=
options(prompt = "> ", continue = "+ ")
par(op)
@

<<Cs18_code, eval=TRUE, echo=FALSE, results=hide, fig=FALSE, keep.source=TRUE>>=
###############################################################
#    GCDF FUNCTION
#    This function converts units of degrees lat/lon to miles,
#    nautical miles, or kilometers
###############################################################
GCDF <- function(lon1, lon2, lat1, lat2, degrees = TRUE, units = "miles") {
  # This is the function for the Great Circle Distance Formula
  # using decimal degrees or radians
  # Calculations at: http://www.nhc.noaa.gov/gccalc.shtml
  # This first component is only dependent on degrees or radians
  temp <- ifelse(degrees == FALSE, acos(sin(lat1) *
    sin(lat2) + cos(lat1) * cos(lat2) * cos(lon2 - lon1)),
  acos(sin(lat1 / 57.2958) * sin(lat2 / 57.2958) + cos(lat1 / 57.2958)
  * cos(lat2 / 57.2958) * cos(lon2 / 57.2958 - lon1 / 57.2958))
  )
  r <- 3963.0 # (statute miles) , default
  if ("units" == "nm") r <- 3437.74677 # (nautical miles)
  if ("units" == "km") r <- 6378.7 # (kilometers)
  return(r * temp)
}

library(maps) # must be installed from CRAN

# our noisy data (with no missing values)
turtles <- levels(loggerheadNoisy$turtle)
levels(loggerheadNoisy$turtle)

############## SPECIFY THE TURTLE NAME HERE
turtlename <- "BigMama"

dat <- loggerheadNoisy[which(loggerheadNoisy$turtle == turtlename), 5:6]
dat <- t(dat)

# Set up the MSSM model
# We are going to make a big approximation:
# We are going to pretend that 1 deg longitude
# change is equal to about the same distance (miles)
# over the range of latitudes that the turtles are moving
# That's not true.  There is about a 10% difference across
# their range of latitude movement.
Q.model <- "diagonal and unequal"
R.model <- "diagonal and unequal"
U.model <- "unequal"
Z.model <- "identity"

# Fit a random walk model for lon/lat to the lon/lat data
kem <- MARSS(dat, model = list(
  Z = Z.model,
  Q = Q.model, R = R.model, U = U.model
))
pred.lon <- kem$states[1, ]
pred.lat <- kem$states[2, ]

##########################################
# Plot the results
##########################################
op <- par(mai = c(0, 0, 0, 0))
map("state", region = c(
  "florida", "georgia",
  "south carolina", "north carolina", "virginia",
  "delaware", "new jersey", "maryland"
), xlim = c(-85, -65))
points(loggerheadNoisy$lon[which(loggerheadNoisy$turtle == turtlename)],
  loggerheadNoisy$lat[which(loggerheadNoisy$turtle == turtlename)],
  col = "blue", pch = 21, cex = 0.7
)
lines(pred.lon, pred.lat, col = "red", lwd = 2)

# add the good location data
goodturtles <- loggerhead
gooddat <- goodturtles[which(goodturtles$turtle == turtlename), 5:6]
points(gooddat[, 1], gooddat[, 2], col = "black", lwd = 2, pch = 3, cex = 1.1)
legend("bottomright", c("bad locations", "estimated true location", "good location data"), pch = c(1, -1, 3), lty = c(-1, 1, -1), col = c("blue", "red", "black"), bty = F)

# add the proposed fishery areas
lines(c(-77, -78, -78, -77, -77), c(33.5, 33.5, 32.5, 32.5, 33.5),
  col = "red", lwd = 2
)
lines(c(-75, -76, -76, -75, -75), c(38, 38, 37, 37, 38),
  col = "red", lwd = 2
)

###########################################
# Calculate the average miles traveled each day using
# the function GCDF defined above
# You must select and run the GCDF code first
###########################################
distance <- array(NA, dim = c(dim(dat)[2] - 1, 1))
for (i in 2:dim(dat)[2]) {
  distance[i - 1] <- GCDF(
    pred.lon[i - 1], pred.lon[i],
    pred.lat[i - 1], pred.lat[i]
  )
}

par(op) # reset plotting pars back to normal
par(mfrow = c(1, 2)) # make a 2 panel graph
hist(distance) # make a histogram of distance traveled per day
print(paste(
  "KalmanEM estimate of ave. mile per day for ",
  turtlename, " = ", mean(distance)
))

# Compare to the distance traveled per day if you used the raw data
distance <- array(NA, dim = c(dim(dat)[2] - 1, 1))
for (i in 2:dim(dat)[2]) {
  distance[i - 1] <- GCDF(dat[1, i - 1], dat[1, i], dat[2, i - 1], dat[2, i])
}
hist(distance) # make a histogram of distance traveled per day
mean(distance)
print(paste(
  "Raw estimate of ave. mile per day for ",
  turtlename, " = ", mean(distance)
))
@
